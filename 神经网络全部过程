import tensorflow as tf
from numpy.random import RandomState

# 定义网络的输入和参数
x = tf.placeholder(tf.float32, [None, 2], name='x-input')
y_ = tf.placeholder(tf.float32, [None, 1], name='y-input')  # 标注好的答案
w1 = tf.Variable(tf.random_normal([2, 3], stddev=1, seed=1))
w2 = tf.Variable(tf.random_normal([3, 1], stddev=1, seed=1))
# 定义网络的前馈过程
a = tf.matmul(x, w1)
y = tf.matmul(a, w2)  # 运算而来的结果
# 定义损失函数(交叉熵)和反馈传播优化算法
y = tf.sigmoid(y)  # output 0-1
cross_entropy = -tf.reduce_mean(
    y_*tf.log(tf.clip_by_value(y, 1e-10, 1.0))+(1-y)*tf.log(tf.clip_by_value(1-y, 1e-10, 1.0)))
train_step = tf.train.AdamOptimizer(0.001).minimize(cross_entropy)

# 通过随机数生成一个模拟数据集 大写X/Y
rdm = RandomState(1)
dataset_size = 128
X = rdm.rand(dataset_size, 2)
# 定义x1+x2<1为正样本，其他为负样本。0-负样本，1-正样本
Y = [[int(x1+x2 < 1)] for (x1, x2) in X]

# 创建会话运行
batch_size = 8
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())
    print(sess.run(w1))
    print(sess.run(w2))

    # 设定训练轮数5000
    STEPS = 5000
    for i in range(STEPS):
        start = (i*batch_size) % dataset_size
        end = min(start+batch_size, dataset_size)
        sess.run(train_step,
                 feed_dict={x: X[start:end], y_: Y[start:end]})
        if i % 1000 == 0:
            total_cross_entropy = sess.run(cross_entropy, feed_dict={x: X, y_: Y})
            print("%d training steps,cross entropy on all data is %g" % (i, total_cross_entropy))

    print(sess.run(w1))
    print(sess.run(w2))
